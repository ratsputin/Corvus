; File: pasmath.text
; Date: 15-Dec-80
;

        IDENT   PASMATH
        
        GLOBAL  %I_MUL4,%I_DIV4,%I_MOD4
        
;
; $I_MUL4 - Multiply two 4-byte integers
;
; Parameters: ST.L - Arg 1
;             ST.L - Arg 2
;
; Returns:    ST.L - Product
;
; Scratches:  All Registers Saved
;

%I_MUL4
        MOVE.L  D0,-(SP)        ; Save scratch registers
        MOVE.L  D1,-(SP)
        MOVE.W  16(SP),D0       ; A1u
        MULS    14(SP),D0       ; A1u * A2l
        MOVE.W  12(SP),D1       ; A2u
        MULS    18(SP),D1       ; A2u * A1l
        ADD.W   D1,D0           ; A1u * A2l + A2u * A1l
        SWAP    D0
        CLR.W   D0
        MOVE.W  18(SP),D1       ; A1l
        MULU    14(SP),D1       ; A1l * A2l
        ADD.L   D1,D0           ; The Answer
        MOVE.L  D0,16(SP)       ; Store the result
        MOVE.L  (SP)+,D1        ; Restore scratch registers
        MOVE.L  (SP)+,D0
        MOVE.L  (SP),4(SP)
        ADDQ.L  #4,SP
        RTS
        
;
; $I_DIV4 - Divide two 4-byte integers
;
; Parameters: ST.L - Dividend
;             ST.L - Divisor
;
; Returns:    ST.L - Quotient
;
; Scratches:  All Registers Saved
;

%I_DIV4
        MOVE.L  D0,-(SP)        ; Save scratch registers
        MOVE.L  D1,-(SP)
        MOVE.L  16(SP),D0       ; Fetch Dividend
        MOVE.L  12(SP),D1       ; Fetch Divisor
        JSR     IDIVMOD
        MOVE.L  D1,16(SP)       ; Store the result
        MOVE.L  (SP)+,D1        ; Restore scratch registers
        MOVE.L  (SP)+,D0
        MOVE.L  (SP),4(SP)
        ADDQ.L  #4,SP
        RTS
        
;
; $I_MOD4 - Remainder two 4-byte integers
;
; Parameters: ST.L - Dividend
;             ST.L - Divisor
;
; Returns:    ST.L - Remainder
;
; Scratches:  All Registers Saved
;

%I_MOD4
        MOVE.L  D0,-(SP)        ; Save scratch registers
        MOVE.L  D1,-(SP)
        MOVE.L  16(SP),D0       ; Fetch Dividend
        MOVE.L  12(SP),D1       ; Fetch Divisor
        JSR     IDIVMOD
        MOVE.L  D0,16(SP)       ; Store the result
        MOVE.L  (SP)+,D1        ; Restore scratch registers
        MOVE.L  (SP)+,D0
        MOVE.L  (SP),4(SP)
        ADDQ.L  #4,SP
        RTS
        
;
; IDIVMOD - Perform a 32-bit Integer Divide
;
; Parameters:  D0.L = Dividend
;              D1.L = Divisor
;
; Returns:     D0.L = Remainder
;              D1.L = Quotient
;
; Scratches:   ---
;
; Does Pascal Integer Division, where sign(remaindor) = sign(divdend):
;
;  7 div  3 =  2 rem  1
; -7 div  3 = -2 rem -1
;  7 div -3 = -2 rem  1
; -7 div -3 =  2 rem -1
;

IDIVMOD
        MOVEM.L D2-D6,-(SP)     ; Save registers
        MOVE.L  D0,D5           ; D5 = sign of dividend
        BPL.S   DVDPOS          ; D0 := Abs(D0)
        NEG.L   D0
DVDPOS  MOVE.L  D1,D6           ; D6 = sign of divisor
        BPL.S   DVSPOS          ; D1 := Abs(D1)
        NEG.L   D1
DVSPOS  MOVE.L  D0,D2           ; D2 = Dividend
        MOVE.L  D1,D3           ; D3 = Divisor
        CLR.L   D0              ; D0 = Remainder
        CLR.L   D1              ; D1 = Quotient
        MOVEQ   #31,D4          ; D4 = Counter
D_LOOP  ROXL.L  #1,D2           ; Transfer upper bit of Dividend ...
        ROXL.L  #1,D0           ; ... to lower bit of Quotient
        LSL.L   #1,D1           ; Multiply Quotient by 2
        CMP.L   D3,D0           ; Will Divisor go into Remainder?
        BLT.S   D_ZERO          ; If so, then:
        SUB.L   D3,D0           ;  1. Subtract Divisor from Remainder, and
        ADDQ.L  #1,D1           ;  2. Incriment Quotient.
D_ZERO  SUBQ.W  #1,D4           ; Done yet?
        BGE.S   D_LOOP
        TST.L   D5              ; Was dividend < 0?
        BPL.S   REMPOS          ; No. Remainder is ok.
        NEG.L   D0              ; Yes. Negate remainder.
REMPOS  EOR.L   D5,D6           ; Should quotient be negative?
        BPL.S   QUOPOS          ; No.
        NEG.L   D1              ; Yes. Negate it.
QUOPOS  MOVEM.L (SP)+,D2-D6     ; Restore registers
        RTS
        
        END

