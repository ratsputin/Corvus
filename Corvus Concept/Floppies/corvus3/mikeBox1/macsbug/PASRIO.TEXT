{File: pasrio.text}
{Date: 07-Dec-81}
{$I-}
{$R-}
{$%+}
program pasrio;
    
    type unpkrec = record u,l: longint;
                          exp: integer;
                          sign: -128..127;
                          kind: 1..5;
                   end;
    
    procedure %pf_unpk(r: real; var u: unpkrec); external;
    
    procedure %w_e(var f: text; val: real; len: integer);
        var Negative,ZeroFlag: Boolean;
            normval: real;
            i,exp,truncval: integer;
            sign: char;
            buf: array[1..7] of char;
            urec: unpkrec;
    begin
    if len < 8
       then len := 8;
    %pf_unpk(val,urec);
    if urec.kind >= 4
    then begin
         if urec.kind = 4
            then if urec.sign < 0
                    then sign := '-'
                    else sign := '+'
            else sign := '?';
         for i := 1 to len do write(sign);
         end
    else begin
         len := len - 1;
         Negative := val < 0;
         if Negative
            then val := -val;
         
         { Compute:  1.0 <= normalized value < 10.0, and exponent. }
         
         exp := 0; normval := val;
         if normval > 10
            then begin
                 i := 8;  { Must be a power of 2 }
                 repeat
                        if normval > pwroften(i)
                           then begin
                                exp := exp + i;
                                normval := val/pwroften(exp);
                                end
                           else i := i div 2;
                 until i = 0;
                 end;
         if normval <> 0
         then begin
              if normval < 1
                 then begin
                      i := 8; { Must be a power of 2 }
                      repeat
                             if normval < (1 / pwroften(i - 1))
                                then begin
                                     exp := exp - i;
                                     normval := val*pwroften(-exp);
                                     end
                                else i := i div 2;
                      until i = 0;
                      end;
              end;
         
         { Round by adding 5 to digit just beyond printing decimal places. }
         
         if len > 11
            then normval := normval + 5/pwroften(7)
            else normval := normval + 5/pwroften(len - 5);
         
         { Fix normalization if rounding messed it up. }
         
         if normval >= 10
            then begin
                 exp := exp  + 1;
                 normval := normval/10;
                 end;
         
         { Fill in the characters of buf. }
         
         ZeroFlag := TRUE;
         for i := 1 to 7 do
             begin
             truncval := trunc(normval);
             if (truncval <> 0) and (i <= len - 5)
                then ZeroFlag := FALSE;
             buf[i] := chr(truncval + ord('0'));
             normval := (normval - truncval)*10;
             end;
         
         if Negative and (not ZeroFlag)
            then sign := '-'
            else sign := ' ';
         
         if ZeroFlag
            then exp := 0;
         
         write(f,sign,buf[1],'.');
         for i := 2 to len - 5 do
             if i <= 7
                then write(f,buf[i])
                else write(f,'0');
         
         if exp < 0
            then begin
                 sign := '-';
                 exp := -exp;
                 end
            else sign := '+';
         write(f,'E',sign,chr((exp div 10) + ord('0')),
                         chr((exp mod 10) + ord('0')));
         end;
    end; {%w_e}
    
    procedure %w_f(var f: text; val: real; totalwidth,fractdigits: integer);
        var Negative,ZeroFlag: Boolean;
            normval: real;
            i,exp,truncval,lower: integer;
            sign,ch: char;
            buf: array[1..7] of char;
            urec: unpkrec;
    begin
    %pf_unpk(val,urec);
    if urec.kind >= 4
    then begin
         if urec.kind = 4
            then if urec.sign < 0
                    then sign := '-'
                    else sign := '+'
            else sign := '?';
         for i := 1 to totalwidth do write(sign);
         end
    else begin
         Negative := val < 0;
         if Negative
            then val := -val;
         
         { Compute:  1.0 <= normalized value < 10.0, and exponent. }
         
         exp := 0; normval := val;
         if normval > 10
            then begin
                 i := 8;  { Must be a power of 2 }
                 repeat
                        if normval > pwroften(i)
                           then begin
                                exp := exp + i;
                                normval := val/pwroften(exp);
                                end
                           else i := i div 2;
                 until i = 0;
                 end;
         if normval <> 0
            then begin
                 if normval < 1
                    then begin
                         i := 8; { Must be a power of 2 }
                         repeat
                                if normval < (1 / pwroften(i - 1))
                                   then begin
                                        exp := exp - i;
                                        normval := val*pwroften(-exp);
                                        end
                                   else i := i div 2;
                         until i = 0;
                         end;
                 end;
         
         { Round by adding 5 to digit just beyond printing decimal places. }
         
         if exp + 1 + fractdigits > 6
            then normval := normval + 5/pwroften(7)
            else normval := normval + 5/pwroften(exp + 1 + fractdigits);
         
         { Fix normalization if rounding messed it up. }
         
         if normval >= 10
            then begin
                 exp := exp + 1;
                 normval := normval/10;
                 end;
         
         { Fill in the characters of buf. }
         
         ZeroFlag := TRUE;
         for i := 1 to 7 do
             begin
             truncval := trunc(normval);
             if (truncval <> 0) and (i <= exp + 1 + fractdigits)
                then ZeroFlag := FALSE;
             buf[i] := chr(truncval + ord('0'));
             normval := (normval - truncval)*10;
             end;
         
         if ZeroFlag
            then Negative := FALSE;
         
         lower := ord(Negative) + 3 + fractdigits;
         if exp >= 0
            then lower := lower + exp
            else if fractdigits > 0
                    then lower := lower - 1;
         for i := lower to totalwidth do
             write(f,' ');
         
         if Negative
            then write(f,'-');
         
         for i := 1 to exp + 1 do
             begin
             if ZeroFlag and (i <> exp + 1)
                then ch := ' '
                else if i <= 7
                        then ch := buf[i]
                        else ch := '0';
             write(f,ch);
             end;
         
         if (fractdigits = 0) and (exp < 0)
            then write(f,'0');
         
         write(f,'.');
         
         for i := exp + 2 to exp + 1 + fractdigits do
             begin
             if (i <= 7) and (i >= 1)
                then ch := buf[i]
                else ch := '0';
             write(f,ch);
             end;
         end;
    end; {%w_f}
    
    function %r_r: real;
      type pi = ^integer;
      var f: array[0..0] of ^text;
          lch: char; Negative,ErrorFlag,ExpNeg: Boolean;
          bias,exp: integer; intvalue: longint; pp: ^pi;
    begin
    Negative := FALSE; ErrorFlag := FALSE; ExpNeg := FALSE;
    bias := 0; exp := 0; intvalue := 0;
    repeat
           read(f[3]^,lch);
    until lch <> ' ';
    if lch = '+'
       then read(f[3]^,lch)
       else if lch = '-'
               then begin
                    Negative := TRUE;
                    read(f[3]^,lch);
                    end;
    if (lch >= '0') and (lch <= '9')
       then repeat
                   if intvalue < 100000000
                      then intvalue := intvalue*10 + ord(lch) - ord('0')
                      else bias := bias + 1;
                   read(f[3]^,lch);
            until (lch < '0') or (lch > '9')
       else ErrorFlag := TRUE;
    if lch = '.'
       then begin
            read(f[3]^,lch);
            if (lch >= '0') and (lch <= '9')
               then repeat
                           if intvalue < 100000000
                              then begin
                                   intvalue := intvalue*10 + ord(lch) - ord('0');
                                   bias := bias - 1;
                                   end;
                           read(f[3]^,lch);
                    until (lch < '0') or (lch > '9')
               else ErrorFlag := TRUE;
            end;
    if not ErrorFlag
       then begin
            if (lch = 'E') or (lch = 'e')
               then begin
                    read(f[3]^,lch);
                    if lch = '+'
                       then read(f[3]^,lch)
                       else if lch = '-'
                               then begin
                                    ExpNeg := TRUE;
                                    read(f[3]^,lch);
                                    end;
                    if (lch >= '0') and (lch <= '9')
                       then repeat
                                   if exp < 1000
                                      then exp := exp*10 + ord(lch) - ord('0')
                                   else ErrorFlag := TRUE;
                                   read(f[3]^,lch);
                            until (lch < '0') or (lch > '9')
                       else ErrorFlag := TRUE;
                    if ExpNeg then exp := -exp;
                    end;
            end;
    exp := exp + bias;
    if abs(exp) > 38 then ErrorFlag := TRUE;
    if Negative then intvalue := -intvalue;
    if ErrorFlag
       then begin
            %r_r := 0;
            pp := pointer($180); { Set IORESULT to:   }
            pp^^ := 14;          { Numeric Read Error }
            end
       else if exp >= 0
               then %r_r := intvalue*pwroften(exp)
               else %r_r := intvalue/pwroften(-exp);
    end; {%r_r}
    
{$c- }
begin {pasrio}
end. {pasrio}

