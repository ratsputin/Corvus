        IDENT   %F_CMP
;
; COPYRIGHT 1981 RICHARD E. JAMES III
;
; COMPARE, MAX, MIN, AND DIM FOR SINGLE PRECISION ON MC68000.

        GLOBAL  %F_MAX,%F_MIN,%F_DIM
        GLOBAL  %F_CMP

        EXTERN  %F_SUB

; MAX AND MIN RETURN ONE OF THEIR ARGUMENTS.
;   IF EITHER ARGUMENT IS A NAN, THEN IT IS RETURNED.
;   (MAX RETURNS THE LAST NAN; MIN RETURNS THE FIRST.)

; DIM(X,Y)=MAX(X-Y,0)
;   PASCAL CALLABLE.

%F_DIM
;------
        MOVE.L  (SP)+,8(SP)    ;SAVE RETURN ADDR
        JSR     %F_SUB
        MOVE.L  4(SP),-(SP)    ;RETURN ADDR
        CLR.L   8(SP)
;      (FALL INTO MAX)

%F_MAX
;------
        MOVE.L  8(SP),-(SP)    ;COPY ARG
        MOVE.L  8(SP),-(SP)    ;COPY ARG
        BSR.S   %F_CMP
        BCC.S   MXOK           ;NO NANS
; ONE WAS A NAN OR UNORDERED INF:
        BCLR    #7,8(SP)       ;REMOVE SIGN OF FIRST
        CMPI.L  #$7F800001,8(SP)
MXOK    BGE.S   MX9
        MOVE.L  4(SP),8(SP)    ;OTHER ARG
MX9     MOVE.L  (SP)+,(SP)
        RTS

%F_MIN
;------
        MOVE.L  8(SP),-(SP)    ;COPY ARG
        MOVE.L  8(SP),-(SP)    ;COPY ARG
        BSR.S   %F_CMP
        BCC.S   MNOK           ;NO NANS
; ONE WAS A NAN OR UNORDERED INF:
        BCLR    #7,4(SP)       ;REMOVE SIGN
        CMPI.L  #$7F800000,4(SP)
MNOK    BLE.S   MN9
        MOVE.L  4(SP),8(SP)    ;OTHER ARG
MN9     MOVE.L  (SP)+,(SP)
        RTS
        PAGE    ;--------------
; SINGLE PRECISION FLOATING POINT
;   COMPARE.
;
; INPUT:  2 FLOATING POINT NUMBERS
;         ON STACK
; OUTPUT: CONDITION CODES Z/N/V SET AS IF SIGNED INTEGERS WERE
;           JUST COMPARED.
;         CARRY FLAG SET IFF EITHER OPERAND IS A NAN.
;
; RESTRICTIONS: UNORDERED CASES (E.G., PROJECTIVE INFINITIES AND NANS)
;         PRODUCE RANDOM RESULTS.
;       A NAN, HOWEVER, DOES COMPARE NOT EQUAL TO ANYTHING.
;
; REGISTER CONVENTIONS
;       D0      FIRST OPERAND
;       D1      SECOND OPERAND

NSAVED  EQU     3*4            ;NUMBER OF BYTES FOR SAVED REGS
CODES   EQU     18             ;WHERE TO PUT CONDITION CODE ON STACK

%F_CMP
;------
        MOVEM.L D0-D2,-(SP)    ;SAVE REGISTERS
        MOVEM.L NSAVED+4(SP),D0/D1
; (END OF INTERFACE)

        MOVE.L  D1,D2
        AND.L   D0,D2          ;CMP SIGNS
        BMI.S   NBOTHMI 
        EXG     D0,D1          ;BOTH MINUS
NBOTHMI CMP.L   D1,D0          ;MAIN COMPARE
        ANDI.B  #$0E,CCR       ;CLEAR C
        MOVE    SR,CODES(SP)
        LSL.L   #1,D0
        LSL.L   #1,D1
        CMP.L   D1,D0
        BCC.S   CMP4
        EXG     D0,D1          ;FIND LARGER
CMP4    CMPI.L  #$FF000000,D0
        BLS.S   CMP6 
; NAN
        MOVE.W  #$01,CODES(SP) ;C,NZ
CMP6    TST.L   D0
        BNE.S   CMP8
        MOVE.W  #$04,CODES(SP) ;-0=0

;   RESULT IS THE CONDITION CODE IN CODES(SP)
; (EXIT INTERFACE:)
CMP8    MOVEM.L (SP)+,D0-D2
        MOVE.L  (SP)+,4(SP)
        ADDQ.L  #2,SP
        RTR

        END
