        IDENT   %D_CMP
;
; COPYRIGHT 1981 RICHARD E. JAMES III

; COMPARE, MAX, MIN, DIM  FOR DOUBLE PRECISION.

        GLOBAL  %D_MAX,%D_MIN,%D_DIM
        EXTERN  %D_SUB

; MAX AND MIN RETURN ONE OF THEIR ARGUMENTS.
;   IF EITHER ARGUMENT IS A NAN, THEN IT IS RETURNED.
;   (MAX RETURNS THE LAST NAN; MIN RETURNS THE FIRST.)

; DIM(X,Y)=MAX(0,X-Y)
;   PASCAL CALLABLE.

%D_DIM
;------
        MOVE.L  (SP)+,4*4(SP)  ;STASH AWAY RETURN ADDR
        JSR     %D_SUB
        MOVE.L  2*4(SP),-(SP)  ;RETURN ADDR
        CLR.L   3*4(SP)
        CLR.L   4*4(SP)
;      (FALL INTO MAX)

; FOR MAX AND MIN:
; INPUT:  2 DOUBLE PRECISION NUMBERS ON STACK
; OUTPUT: 1 DOUBLE PRECISION NUMBER ON STACK

%D_MAX
;------
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        BSR.S   %D_CMP
        BCC.S   MXOK    ;NO NANS
; ONE WAS A NAN OR UNORDERED INF:
        BCLR    #7,12(SP)      ;REMOVE SIGN OF FIRST
        CMPI.L  #$7FF00001,12(SP)
MXOK    BLT.S   MOTHR          ;USE OTHER ARGUMENT
        MOVE.L  (SP)+,(SP)
        MOVE.L  (SP)+,(SP)
        RTS

%D_MIN
;------
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        MOVE.L  16(SP),-(SP)  ;COPY ARG
        BSR.S   %D_CMP
        BCC.S   MNOK    ;NO NANS
; ONE WAS A NAN OR UNORDERED INF:
        BCLR    #7,4(SP)     ;REMOVE SIGN
        CMPI.L  #$7FF00000,4(SP)
MNOK    BLE.S   MN9
MOTHR   MOVE.L  4(SP),12(SP) ;OTHER ARG
        MOVE.L  8(SP),16(SP) ;OTHER ARG
MN9     MOVE.L  (SP)+,(SP)
        MOVE.L  (SP)+,(SP)
        RTS
        PAGE
; DOUBLE PRECISION FLOATING POINT COMPARE.
;
; INPUT:  2 DOUBLE PRECISION NUMBERS ON STACK
; OUTPUT: CONDITION CODES Z/N/V SET AS
;         IF SIGNED INTEGERS WERE JUST COMPARED.
;         CARRY FLAG SET IFF EITHER OPERAND IS A NAN.
;
; RESTRICTIONS: UNORDERED CASES (E.G.,
;       PROJECTIVE INFINITIES AND NANS)
;       PRODUCE RANDOM RESULTS.
;       A NAN, HOWEVER, DOES COMPARE
;       NOT EQUAL TO ANYTHING.
; REGISTER CONVENTIONS
;       D0/D1   FIRST OPERAND
;       D2/D3   SECOND OPERAND
;       D4      TEMP

NSAVED  EQU     5*4
CODES   EQU     34      ;CONDITION ANSWER

        GLOBAL  %D_CMP
%D_CMP
;------
        MOVEM.L D0-D4,-(SP)  ;SAVE
        MOVEM.L NSAVED+4(SP),D0-D3
; (END OF ENTRY INTERFACE)
; REGISTERS NOW CONTAIN:
;       D0      FIRST ARGUMENT, MOST SIGNIFICANT 32 BITS
;       D1      FIRST ARGUMENT, LEAST SIGNIFICANT 32 BITS
;       D2      SECOND ARGUMENT, MOST SIGNIFICANT 32 BITS
;       D3      SECOND ARGUMENT, LEAST SIGNIFICANT 32 BITS

        MOVE.L  D2,D4
        AND.L   D0,D4          ;CMP SIGNS
        BMI.S   NBOTHMI 
        EXG     D0,D2          ;BOTH MINUS
        EXG     D1,D3
NBOTHMI CMP.L   D2,D0          ;MAIN COMPARE
        BNE.S   GOTCMP         ;GOT THE ANSWER
        MOVE.L  D1,D4
        SUB.L   D3,D4          ;COMPARE LOWERS
        BEQ.S   GOTCMP         ;ENTIRELY EQUAL
        ROXR.L  #1,D4
        ANDI.B  #$0A,CCR       ;CLEAR Z, IN CASE DIFFER BY 1 ULP
GOTCMP  ANDI.B  #$0E,CCR       ;CLEAR CARRY
        MOVE    SR,CODES(SP)
        LSL.L   #1,D0
        LSL.L   #1,D2
        CMP.L   D2,D0
        BCC.S   CMP4
        EXG     D0,D2          ;FIND LARGER IN MAGNITUDE
CMP4    CMPI.L  #$FFE00000,D0
        BLS.S   CMP6           ;NO NAN
        MOVE.W  #$01,CODES(SP) ;C,NZ
        BRA.S   CMP8           ;ONE WAS A NAN
CMP6    OR.L    D1,D0
        OR.L    D2,D0
        OR.L    D3,D0
        BNE.S   CMP8           ;NON-ZERO
        MOVE.W  #$04,CODES(SP) ;-0=0
; (EXIT INTERFACE:)
CMP8    MOVEM.L (SP)+,D0-D4
        MOVE.L  (SP)+,12(SP)
        ADDA.W  #10,SP
        RTR

        END
