{$S+}
PROGRAM Netcheck;
{$U release:CORVUS.LIBRARY}
USES Smartio,Dates,Driveio,DrUtils;


{*******************************************************************}
{ This program is checks a previous CRCLIST against what is         }
{ currently on the net.  It prints a list of all files that have    }
{ changed since the given CRCLIST.                                  }
{*******************************************************************}

CONST
     Revnumber = '1.1';
     DirLen = 2028;  { 26 bytes/entry * 78 entries }
     
TYPE
     { declarations for UCSD volumes }
     DateRecord = PACKED RECORD
        Month:  0..12;
        Day:    0..31;
        Year:   0..100;
        END;
        
     DirSize = 0..77;
     VolID = STRING[7];
     FileID = STRING[15];
     FileType = (Untyped, Xdisk, Code, Text, Info, Data, Graf, Foto, Securedir);
     DirRecord = RECORD
        FirstBlock: INTEGER;
        LastBlock: INTEGER;
        CASE DirFileKind: FileType OF
           SecureDir,UnTyped:
              (DirVolName: VolID;
               ZeroBlock,NumofFiles,TotalBlocks: INTEGER;
               LastBoot: DateRecord);
           Xdisk,Code,Text,Info,Data,Graf,Foto:
              (DirFileName: FileID;
               LastByte: 0..512;
               DirFileDate: DateRecord);
        END;
        
     Directory = ARRAY [DirSize] OF DirRecord;
     Databuf = PACKED ARRAY [0..5119] OF CHAR;
     
     Fileinfo = RECORD
        fname: FileID;    
        length: INTEGER;
        day:    0..31;
        year:   0..100;
        month:  STRING[3];
        ftype:  STRING[10];
        CRCval: INTEGER;
     END;
        
     RX = 1..3;
     CDxBuf = RECORD
        CASE RX  OF
          1: (dir: Directory);
          2: (dbuf: Databuf);
          3: (cbuf: CDBuf);
        END;
  
VAR
     VolTable:  ARRAY [0..63] OF VolTabEnt;
     MaxBlk: ARRAY [1..DrMax] OF INTEGER; { maximum number of blocks
                                     { per drive. }
     Tbuf: CDxBuf;  { general purpose iobuffer for talking to drive }
     NumDrives: INTEGER;  { number of drives online }
                                     
     i: INTEGER;
     ErrCode: INTEGER;
     PDebug:  BOOLEAN;    { program debug flag }
     inf,outf: FILE of CHAR;
     Floppy: FILE;
     CurDate: STRING;
     
{ Externals and forwards }

PROCEDURE checksumm( var checksum: integer; buf: databuf; length: integer );
EXTERNAL;
PROCEDURE IoChk( Drive: INTEGER; Sector: INTEGER ); FORWARD;
PROCEDURE DrvRd( var Buf: CDxBuf; Len, Drv, Sec: INTEGER); FORWARD;

{$P}
{*******************************************************************}
{ PROCEDURE Initialize gets the number of drives online, and their  }
{ sizes.                                                            }
{*******************************************************************}

PROCEDURE Initialize;

VAR
     VirDrives: VDrArray;  { for call to CheckDrives }
     PhysDrives: PDrArray; { ditto ... }
     i: INTEGER;
     D: date;
     
BEGIN

{ get MaxBlk array and NumDrives }
CheckDrives( NumDrives, VirDrives, PhysDrives );
FOR i := 1 TO NumDrives DO
   BEGIN
   MaxBlk[i] := TRUNC( VirDrives[i].Capacity );
   IF PDebug THEN WRITELN('Drive ',i,', blocks=',MaxBlk[i]);
   END;
IF PDebug THEN READLN;
FilerDate(D);
Dt2Str(D,CurDate);
END; { PROCEDURE Initialize }

{$P}
{*********************************************************************}
{ Procedures to talk to drive:                                        }
{  PROCEDURE IoChk is called by DrvRd and DrvWr to report errors.     }
{  PROCEDURE DrvRd reads a specified number of bytes from the Corvus  }
{     Drv starting at sector Sec.                                     }
{*********************************************************************}

PROCEDURE IoChk(* Drive: INTEGER; Sector: INTEGER ); FORWARD *);
VAR
     ch: char;

BEGIN
IF ErrCode > 127 THEN
   BEGIN
   CRT(Eraseall);
   WRITELN; WRITELN(beep,'Disk error:  ',ErrCode);
   WRITELN('On drive ',drive,', at sector ',sector);
   WRITE('Type <space> to continue');
   READ(ch);  IF ch<>'!' THEN EXIT(PROGRAM);
   END;
END;  {PROCEDURE IoChk}

PROCEDURE DrvRd(* var Buf: CDxBuf; Len, Drv, Sec: INTEGER); FORWARD *);
VAR i: INTEGER;
BEGIN
IF PDebug THEN WRITELN('Reading drive ',Drv,', Sector ',Sec);
IF Drv=0      { read the floppy on unit 9 }
   THEN BEGIN
   i := BLOCKREAD( Floppy, Buf.dbuf, Len div 512, Sec div 2 );
   END
ELSE
   BEGIN
   ErrCode := CDRead( Buf.cbuf, Len, Drv, Sec );
   IoChk( Drv, Sec );
   END;
END; { PROCEDURE DrvRd }

FUNCTION GetAddr( Trk: TrkAddr ): INTEGER;

BEGIN
GetAddr := Trk.Msb*4096 + Trk.Lsb*16;
END;

{$P}
{*********************************************************************}
{  PROCEDURE ReadVT reads the appropriate volume table (i.e., either  }
{  user or global) from the specified drive.                          }
{*********************************************************************}

PROCEDURE ReadVT( Drive: INTEGER );

VAR
     tsector, n: INTEGER;
     Done: BOOLEAN;
     
BEGIN
WRITELN;
WRITELN('Reading volume table of drive ',Drive);
tsector := 15;
DrvRd( tbuf, 256, Drive, tsector );
n := 0;  Done := false;
REPEAT WITH VolTable[n] DO
   BEGIN
   Ftrk := Tbuf.cbuf.buffer[n*2];
   Ltrk := Tbuf.cbuf.buffer[n*2+1];
   IF Ftrk.Top3=7 THEN
      Done := TRUE
   ELSE
      BEGIN
      n := n+1;
      Ftrk.Top3 := Drive;
      END;
   END
UNTIL Done;

END;  { PROCEDURE ReadVT }

{$P}
{*******************************************************************}
{ Procedure CheckDir processes the specified volume.                }
{*******************************************************************}
  
PROCEDURE CheckDir( Drive, Vol: INTEGER );
VAR
    VolDir: CDxBuf;
    fi,j,k: INTEGER;
    tempcrc: INTEGER;
    M,T: INTEGER;
    DelChar: BOOLEAN;
    Sorted: ARRAY [1..77] OF INTEGER;
    Months: ARRAY [0..12] OF STRING[3];
    vname:  VolID;
    ftype:  STRING[10];
    infileinfo: fileinfo;

PROCEDURE SORT( Dir: Directory; N: INTEGER );
VAR
     i,j,t: INTEGER;
BEGIN
FOR i:=1 to N DO Sorted[i] := i;
Months[0] := '???'; Months[1] := 'Jan'; Months[2] := 'Feb'; Months[3] := 'Mar';
Months[4] := 'Apr'; Months[5] := 'May'; Months[6] := 'Jun'; Months[7] := 'Jul';
Months[8] := 'Aug'; Months[9] := 'Sep'; Months[10] := 'Oct';Months[11]:= 'Nov';
Months[12] := 'Dec';
FOR i:=1 TO N-1 DO
  FOR j:= i+1 TO N DO
    IF Dir[Sorted[i]].DirFileName > Dir[Sorted[j]].DirFileName THEN
       BEGIN
       t := Sorted[i];
       Sorted[i] := Sorted[j];
       Sorted[j] := t;
       END;
END; { SORT }

FUNCTION CRC( Start,Len: INTEGER ): INTEGER;
var i,c: integer;
    b: CDxbuf;
begin
c := 0; CRC := 0; i := 0;
IF Pdebug THEN WRITELN('Generating CRC for sector ',Start,', length ',Len);
WHILE i< Len DO
  BEGIN
  DrvRd(b,5120,Drive,Start+i*2);  { read 10 blocks at a time }
  IF i+9 < Len THEN checksumm( c, b.dbuf, 5120 )
               ELSE checksumm( c, b.dbuf, (Len-i)*512 );
  i := i+10;
  end;
CRC := c;
end; {function CRC}

FUNCTION Getnextfile(VAR finfo: fileinfo): BOOLEAN;
VAR line: STRING[80];
    temp: STRING;
    i: INTEGER;
BEGIN
readln(inf,line);
IF Pdebug THEN WRITELN(line);
Getnextfile := FALSE;
IF line<>'' THEN
   BEGIN
   Getnextfile := TRUE;
   WITH finfo DO BEGIN
   fname := ''; i:=4;
   WHILE line[i]<>' ' DO BEGIN fname:=CONCAT(fname,COPY(line,i,1)); i:=i+1; END;
   temp := COPY(line,29,3);  length := Str2num(temp);
   temp := COPY(line,37,2);  day := Str2num(temp);
   month := COPY(line,40,3);
   temp := COPY(line,44,2);  year := Str2num(temp);
   ftype := COPY(line,57,8);
   temp := COPY(line,68,3);  CRCval := Str2num(temp);
   IF Pdebug THEN 
      WRITELN( 'Read ',fname:20,length:5,day:2,month,year:2,ftype,crcval:3);
   END;
   END;
END; { function Getnextfile }

BEGIN
T := GetAddr(VolTable[Vol].Ftrk);
IF Drive=0 THEN T := 0;
DrvRd( VolDir, DirLen, Drive, T+4 );
WITH VolDir.Dir[0] DO
   IF (LENGTH(DirVolName)<1) OR (LENGTH(DirVolName)>7) THEN
      BEGIN DirVolName := 'ILLEGAL'; NumofFiles := 0; END;
vname := VolDir.Dir[0].DirVolName;
WRITELN ('Reading drive ',Drive,' volume ',vname);
SORT (VolDir.Dir,VolDir.Dir[0].NumofFiles);

fi:=1;
WHILE Getnextfile(infileinfo) DO
   BEGIN
   IF Pdebug THEN 
      WRITELN('"',infileinfo.fname,'"',VolDir.Dir[Sorted[fi]].DirFilename,'"');
   WHILE (infileinfo.fname>VolDir.Dir[Sorted[fi]].DirFilename) AND
         (fi<VolDir.Dir[0].NumofFiles) DO fi:=fi+1;
   WITH VolDir.Dir[Sorted[fi]] DO
   IF infileinfo.fname <> DirFileName THEN
      BEGIN
      WRITELN(outf,'File ',infileinfo.fname,' is missing from volume ',vname);
      WRITELN(outf);
      END
   ELSE BEGIN
      M:=DirFileDate.Month;
      IF (M<1) OR (M>12) THEN M:=0;
      ftype := 'Unknown ';
      CASE DirFileKind OF
          Code: ftype := 'Codefile';
          Text: ftype := 'Textfile';
          Data: ftype := 'Datafile';
          END;
      IF DirFileDate.Year = 100 THEN DirFileDate.Year := 99;
      tempcrc := CRC((T+Firstblock*2),(Lastblock-Firstblock)); 
      IF (infileinfo.length<> LastBlock-FirstBlock ) OR
         (infileinfo.day   <> DirFileDate.Day      ) OR
         (infileinfo.Month <> Months[m]            ) OR
         (infileinfo.Year  <> DirFileDate.Year     ) OR
         (infileinfo.ftype <> ftype                ) OR
         (infileinfo.crcval<> tempcrc              ) THEN
         BEGIN
         WRITELN(outf, 'Error on file ',DirFileName,' of volume ',vname);
         WRITELN(outf, 'Current information is: ');
         WRITE  (outf,' ':3,DirFileName,' ':20-LENGTH(DirFileName),
            LastBlock-FirstBlock:8,'     ',
            DirFileDate.Day:2,'-',Months[m],'-',DirFileDate.Year,
            FirstBlock:8,'   ',ftype);  
         WRITELN(outf,'   ',tempcrc:3);
         WRITELN(outf);
         END;
      IF fi < VolDir.Dir[0].NumofFiles THEN fi := fi+1;
      END;
   END;
END; { PROCEDURE CheckDir }

PROCEDURE FindVolume( Vname: STRING; VAR Drive,index: INTEGER );
VAR
     T: INTEGER;
     i,v: INTEGER;
     VolDir: CDxBuf;
BEGIN
IF Vname = 'FLOPPY' THEN
   BEGIN Drive:=0; Index := 0; EXIT(Findvolume); END;

FOR i:=1 TO NumDrives DO
   BEGIN
   ReadVT(i);
   v := 0;
   WHILE VolTable[v].Ftrk.Top3<7 DO
      BEGIN
      T := GetAddr(VolTable[v].Ftrk);
      DrvRd( VolDir, DirLen, i, T+4 );
      IF VolDir.Dir[0].DirVolName=Vname THEN
         BEGIN
         Drive := i;  index := v;
         EXIT(FindVolume);
         END;
      v := v+1;
      END;
   END;
Drive := 0;  index := -1;  { not found }
END; { FindVolume}

PROCEDURE Main;
VAR
    infname, outfname: STRING[30];
    Drive: INTEGER;
    vname: VolID;
    vindex: INTEGER;

   FUNCTION Getvolumename(VAR vname:VolID): BOOLEAN;
   VAR line: STRING[80];
       i: INTEGER;
       found: BOOLEAN;
   BEGIN
   found := FALSE;
   REPEAT
      readln(inf,line);
      IF Pdebug THEN writeln(line);
      IF length(line)>1 THEN
         IF line[1]='D' THEN
            BEGIN
            i := 16; vname := '';
            WHILE line[i]<>' ' DO 
               BEGIN vname:=CONCAT(vname,COPY(line,i,1)); i:=i+1; END;
            found := TRUE;
            IF Pdebug THEN WRITELN('Found volume ',vname);
            END;
   UNTIL (found) OR (eof(inf));
   Getvolumename := found;
   END; { function Getvolumename }
   
BEGIN
WRITE('Do you want debugging on? N'); CRT(left); 
IF getbyte='Y' THEN Pdebug := TRUE;
WRITE('Enter name of file containing CRCs: '); readln(infname);
WRITE('Enter name of output file: '); readln(outfname);
RESET(inf,infname);  
REWRITE(outf,outfname);
WRITELN(outf, 'Output of NETCHECK program     ', Curdate );
WRITELN(outf, 'Input file is ',infname);
WRITELN(outf);
WHILE Getvolumename(vname) DO
   BEGIN
   Findvolume(vname,drive,vindex);
   WRITELN(outf); WRITELN(outf,'Checking volume ',vname);
   Checkdir(drive,vindex);
   END;
CLOSE(outf,LOCK);
END; {PROCEDURE MAIN}

{$P}
{*******************************************************************}
{ Start of main program...                                          }
{                                                                   }
{*******************************************************************}
  
BEGIN
PDebug := FALSE;
Ioinit; Driveioinit; DrUtilsInit; Initialize;
Main;
END.



